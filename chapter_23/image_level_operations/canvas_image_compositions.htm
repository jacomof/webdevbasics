<!DOCTYPE html>
<!--HTML document to demonstrate the image composition capabilities of HTML5 Canvas.
It does so by assigning several values to the globalCompositeOperation, which determines
how newly added shapes and images interact with pre-existing ones.-->
<html>
<head>
    <meta charset="UTF-8">
    <title>Canvas composition</title>
    <style>
        @import url('../global_styles/canvas_style.css');
    </style>
    <script src="../global_scripts/access_functions.js"></script>
</head>
<body>
    <h1>Ode to joy</h1>
    <canvas id="canvas-element-1" width="500px" height="500px"></canvas>
    <canvas id="canvas-element-2" width="500px" height="500px"></canvas>
    <canvas id="canvas-element-3" width="500px" height="500px"></canvas>
    <canvas id="canvas-element-4" width="500px" height="500px"></canvas>
    <canvas id="canvas-element-5" width="500px" height="500px"></canvas>
    <canvas id="canvas-element-6" width="500px" height="500px"></canvas>
    <canvas id="canvas-element-7" width="500px" height="500px"></canvas>
    <canvas id="canvas-element-8" width="500px" height="500px"></canvas>
    <canvas id="canvas-element-9" width="500px" height="500px"></canvas>
    <canvas id="canvas-element-10" width="500px" height="500px"></canvas>
    <script>

        /*Function which creates a circular shape filled with a rainbow gradient
        color pattern which gets progressively more transparent in its peripheral
        regions. It also has a transparent section on its center.
        */
        function drawKernel(context){

            let grad = context.createRadialGradient(250, 250, 0, 250, 250, 200)
            grad.addColorStop(0, 'rgba(238, 130, 238, 0)')
            grad.addColorStop(0.166,  'rgba(0,0,255, 0)')
            grad.addColorStop(0.332, 'rgba(0, 255,0, 1)')
            grad.addColorStop(0.498, 'rgba(255,255,0, 0.8)')
            grad.addColorStop(0.664, 'rgba(255, 165, 0, 0.75)')
            grad.addColorStop(0.830, 'rgba(255,0,0, 0.3)')
            grad.addColorStop(1, 'rgba(238, 130, 238, 0.1)')
            
            context.fillStyle = grad
            context.beginPath()
            context.arc(250, 250, 200, 0, Math.PI*2) 
            context.closePath()
            context.fill()

        }


        //Function which creates a star shaped figure based on a couple of parameters
        //(mainly its center, the radius of the circle used to draw it and the length 
        //of its peaks relative to the circumference of the mentioned circle)
        function drawStar(context){

            let limb_size = 125
            let radius = 125
            let star_pieces = 5
            let center = {x: 250, y: 270}

            context.fillStyle = 'goldenrod'

            let step = (Math.PI*2.0)/star_pieces
            context.beginPath()
            context.moveTo(center.x, center.y - limb_size - radius)
            
            for(ang = Math.PI/2.0; ang < 5*(Math.PI/2); ang+=step)
            {
                let peak_size = limb_size + radius
                let peak = {x: center.x + Math.cos(ang)*peak_size, 
                    y: center.y - Math.sin(ang)*peak_size}
                let floor = {x: center.x + Math.cos(ang+(step/2.0))*radius, 
                    y: center.y - Math.sin(ang+(step/2.0))*radius}
                context.lineTo(peak.x, peak.y)
                context.lineTo(floor.x, floor.y)
            
            }

            context.closePath()
            //context.stroke()
            context.fill()

        }

        //Default composition a.k.a source-over: New images are drawn on top of already existing ones
        canvas1 = O("canvas-element-1")
        context1 = canvas1.getContext("2d")
        drawKernel(context1)
        drawStar(context1)

        //source-in: New image is drawn only where it intersects with non-transparent parts
        //of original image
        canvas2 = O("canvas-element-2")
        context2 = canvas2.getContext("2d")
        drawKernel(context2)
        context2.globalCompositeOperation = 'source-in'
        drawStar(context2)

        //source-out: New image is drawn only where it doesn't intersects with non-transparent 
        //parts of original image
        canvas3 = O("canvas-element-3")
        context3 = canvas3.getContext("2d")
        drawKernel(context3)
        context3.globalCompositeOperation = 'source-out'
        drawStar(context3)

        //source-atop: New image is drawn only where it intersects with non-transparent parts
        //of original image, and on top of it.
        canvas4 = O("canvas-element-4")
        context4 = canvas4.getContext("2d")
        drawKernel(context4)
        context4.globalCompositeOperation = 'source-atop'
        drawStar(context4)

        //destination-over: New image is drawn behind of the existing image.
        canvas5 = O("canvas-element-5")
        context5 = canvas5.getContext("2d")
        drawKernel(context5)
        context5.globalCompositeOperation = 'destination-over'
        drawStar(context5)

        //destination-in: Original image is drawn only where it intersects with non-transparent parts
        //of new image
        canvas6 = O("canvas-element-6")
        context6 = canvas6.getContext("2d")
        drawKernel(context6)
        context6.globalCompositeOperation = 'destination-in'
        drawStar(context6)

        //destination-out: Exisinting image is drawn only where it doesn't intersects with non-transparent 
        //parts of new image
        canvas7 = O("canvas-element-7")
        context7 = canvas7.getContext("2d")
        drawKernel(context7)
        context7.globalCompositeOperation = 'destination-out'
        drawStar(context7)

        //source-atop: Existing image is drawn only where it intersects with non-transparent parts
        //of new image, and on top of it.
        canvas8 = O("canvas-element-8")
        context8 = canvas8.getContext("2d")
        drawKernel(context8)
        context8.globalCompositeOperation = 'destination-atop'
        drawStar(context8)

        //xor: Resulting image is made transparent where the two images intersect, else
        //it retains its original colors.
        canvas9 = O("canvas-element-9")
        context9 = canvas9.getContext("2d")
        drawKernel(context9)
        context9.globalCompositeOperation = 'xor'
        drawStar(context9)

        //lighter: The images colors are summed, producing a much lighter image.
        canvas10 = O("canvas-element-10")
        context10 = canvas10.getContext("2d")
        drawKernel(context10)
        context10.globalCompositeOperation = 'lighter'
        drawStar(context10)

        console.log("Finished drawing.")

    </script>
</body>
</html>