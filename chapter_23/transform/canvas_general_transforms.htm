<!DOCTYPE html>
<!--HTML5 Canvas has the ability to manipulate images using geometric transformations.
In fact, to do this the canvas uses under the hood a transform matrix that is applied any time
we draw anything on it. Applying here meaning that a function is applied to each of the pixels
of the canvas, and this function is defined by the mentioned matrix. 
 This HTML document demonstrates how to do just that by using both
 built-in transform functions and transform matrixes to modify this matrix.-->
<html>
<head>
    <meta charset="UTF-8">
    <title>Canvas Transforms</title>
    <style>
        @import url('./styles/canvas_general_transforms.css');
    </style>
    <script src="../global_scripts/access_functions.js"></script>
</head>
<body>
    <h1>Lost in translation</h1>
    <figure>
    <canvas id="canvas-element-1" width="500px" height="500px"></canvas>
    <figcaption>1. Translation and rotation.</figcaption>
    </figure>
    <figure>
    <canvas id="canvas-element-2" width="500px" height="500px"></canvas>
    <figcaption>2. Scaling.</figcaption>
    </figure>
    <figure>
    <canvas id="canvas-element-3" width="500px" height="500px"></canvas>
    <figcaption>3. Custom transform: skewing.</figcaption>
    </figure>
    <figure>
    <canvas id="canvas-element-4" width="500px" height="500px"></canvas>
    <figcaption>4. Custom transform: cumulative transform.</figcaption>
    </figure>
    <script>
        //---------------First Canvas----------------------
        canvas1 = O("canvas-element-1")
        context1 = canvas1.getContext("2d")

        //The save function saves in an internal stack the most important properties
        //(for example, the canvas transform) of the canvas in order to be able to 
        //restore them in the future (for example, to cancel a transformation applied
        //to the canvas) 
        context1.save()

        //The translate function is self-explanatory; it translates
        
        context1.translate(200, 200)
        context1.fillRect(0,0,100,100)

        //After applying a transformation to the transform matrix, it persists until 
        //we modify it with other transformations. We can also modify the matrix using 
        //the restore function, which retrieves the canvas state we saved earlier in 
        //the stack and restores the canvas' properties to its previous values. This 
        //has the effect here of negating the transformations we applied earlier and assigning
        //the fillStyle to its default black value.
        context1.restore()

        //The rotate function rotates the canvas a certain number of radians (clockwise rotation).
        //Be careful though, as it pivots around the top left corner of the canvas, and thus
        //changes the position of the center of the images contained within it.
        //That's why to rotate the shape in this section around its center we have to first
        //move the origin of the canvas to the shapes center, then rotate the canvas, and
        //finally move the origin back to its origina position.
        context1.fillStyle="rgba(255,0,0,0.3)" 
        context1.translate(250, 250)
        context1.rotate(Math.PI/4.0)
        context1.translate(-250, -250)
        context1.fillRect(200,200,100,100)

        //---------------Second Canvas----------------------
        //The scale function is very self-explanatory as well: it scales the canvas in the
        //X (first arg.) and Y (second arg.) dimensions. Be careful though, as scaling the
        //canvas also moves the objects inside of it to the bottom-right (this is why
        //here we first translate the object to a position on the top-left
        //side of the square, as for it to be centered after the scaling operation)
        canvas2 = O("canvas-element-2")
        context2 = canvas2.getContext("2d")
        context2.translate(150,150)
        context2.scale(2,2)
        context2.fillRect(0,0,100,100)

        //---------------Third Canvas----------------------
        canvas3 = O("canvas-element-3")
        context3 = canvas3.getContext("2d")
        //Here we apply a custom transform matrix to the canvas by assign each of its
        //different cell values to the canvas transform directly (overwriting its previous value!).
        //If we assign in order to the arguments the names: a,b,c,d,e,f; we can say they
        //have the following effects:
        /*
        e and f: translation
        a and d: scaling
        b and c: skewing

        we can see this in the function that calculates the new position of the pixels in the
        resulting canvas:
        f(x,y) = (a*x + c*y + e, b*x + d*y + f) 
        */
        //Here we skew vertically the drawn shape by assigning a positive non-zero value
        //to the b parameter.
        context3.setTransform(1,0.5,0,1,150,100)
        context3.fillRect(0,0,200,200)

        //---------------Fourth Canvas----------------------
        canvas4 = O("canvas-element-4")
        context4 = canvas4.getContext("2d")

        //The transform of the Canvas can also be modified cumulatively (meaning, the new transform is applied to the previous one, rather than
        //substituting it.) We do so with the transform() method, which has the same arguments the setTransform method.
        //As you can see in the results, we achieve the same effect applying two different transforms as in the previous image, 
        //where we only applied one transform which was already the combination of a translation and a skewing in a single
        //matrix. This demonstrate that they're actually cumulative, and they're not overwriting each other.
        context4.transform(1,0,0,1,150,100)
        context4.transform(1,0.5,0,1,0,0)
        context4.fillRect(0,0,200,200)

    </script>
</body>
</html>